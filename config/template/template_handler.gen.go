// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package authnz

import (
	"context"

	"istio.io/istio/mixer/pkg/adapter"
)

// Template authnZ defines an authorization and authentication adapter template

// Fully qualified name of the template
const TemplateName = "authnz"

// Instance is constructed by Mixer for the 'authnz' template.
//
// The Authn/Z template contains the information necessary to
// control authorization and authentication using OAuth 2.0 / OIDC
// defined protocols. It captures information about the request source, destination
// and code request telemetry that allows comprehensive JWT policy definitions.
type Instance struct {
	// Name of the instance as specified in configuration.
	Name string

	// The request contains the core information about the request being made
	Request *Request

	// The target contains aggregated Kube information about the destination
	Target *Target
}

// Output struct is returned by the attribute producing adapters that handle this template.
//
// The Authn/Z template produces an authorization header of the format
// `Bearer <access> <id>` which should be replaced on the ongoing request.
type Output struct {
	fieldsSet map[string]bool

	// The authorization header
	Authorization string
}

func NewOutput() *Output {
	return &Output{fieldsSet: make(map[string]bool)}
}

func (o *Output) SetAuthorization(val string) {
	o.fieldsSet["authorization"] = true
	o.Authorization = val
}

func (o *Output) WasSet(field string) bool {
	_, found := o.fieldsSet[field]
	return found
}

// A Target contains the Action destination.
type Target struct {

	// The namespace the target service is in
	Namespace string

	// The service the action is being taken on.
	Service string

	// The HTTP method of the request
	Method string

	// The HTTP REST path within the service
	Path string

	// Additional data about the target for use in policy.
	Properties map[string]interface{}
}

// The Headers models the core HTTP headers needed for the JWT/OIDC flows
type Headers struct {

	// The optional cookies are the HTTP request cookies sent by the browser. These
	// contain the encrypted session toke
	Cookies string

	// The optional authorization header contains credentials needed to verify
	// access / authorization privileges.
	Authorization string

	// Additional data about the headers for use in policy.
	Properties map[string]interface{}
}

// The QueryParams are the code HTTP request query parameters used in an OAuth 2.0 / OIDC flow
type QueryParams struct {

	// The error matches an OAuth 2.0 callback error response
	Error string

	// The code matches an OAuth 2.0 callback authorization code grant
	Code string

	// Additional data about the query parameters for use in policy.
	Properties map[string]interface{}
}

// The Request captures information about the incoming HTTP request
type Request struct {

	// The HTTP scheme
	Scheme string

	// The HTTP host
	Host string

	// The HTTP path
	Path string

	// The HTTP headers on the request
	Headers *Headers

	// THE HTTP query params
	Params *QueryParams

	// Additional data about the Request for use in policy.
	Properties map[string]interface{}
}

// HandlerBuilder must be implemented by adapters if they want to
// process data associated with the 'authnz' template.
//
// Mixer uses this interface to call into the adapter at configuration time to configure
// it with adapter-specific configuration as well as all template-specific type information.
type HandlerBuilder interface {
	adapter.HandlerBuilder

	// SetAuthnZTypes is invoked by Mixer to pass the template-specific Type information for instances that an adapter
	// may receive at runtime. The type information describes the shape of the instance.
	SetAuthnZTypes(map[string]*Type /*Instance name -> Type*/)
}

// Handler must be implemented by adapter code if it wants to
// process data associated with the 'authnz' template.
//
// Mixer uses this interface to call into the adapter at request time in order to dispatch
// created instances to the adapter. Adapters take the incoming instances and do what they
// need to achieve their primary function.
//
// The name of each instance can be used as a key into the Type map supplied to the adapter
// at configuration time via the method 'SetAuthnZTypes'.
// These Type associated with an instance describes the shape of the instance
type Handler interface {
	adapter.Handler

	// HandleAuthnZ is called by Mixer at request time to deliver instances to
	// to an adapter.
	HandleAuthnZ(context.Context, *Instance) (adapter.CheckResult, *Output, error)
}
