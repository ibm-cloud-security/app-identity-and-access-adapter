// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// Template authnZ defines an authorization and authentication adapter template
//
// The Authn/Z template contains the information necessary to
// control authorization and authentication using OAuth 2.0 / OIDC
// defined protocols. It captures information about the request source, destination
// and code request telemetry that allows comprehensive JWT policy definitions.
package authnz;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/check.proto";
import "policy/v1beta1/value_type.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_CHECK_WITH_OUTPUT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "authnz";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandleAuthnZService is implemented by backends that wants to handle request-time 'authnz' instances.
service HandleAuthnZService {
    // HandleAuthnZ is called by Mixer at request-time to deliver 'authnz' instances to the backend.
    rpc HandleAuthnZ(HandleAuthnZRequest) returns (HandleAuthnZResponse);
    
}

// Request message for HandleAuthnZ method.
message HandleAuthnZRequest {

    // 'authnz' instance.
    InstanceMsg instance = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}

message HandleAuthnZResponse {
    istio.mixer.adapter.model.v1beta1.CheckResult result = 1;
    OutputMsg output = 2;
}

// Contains output payload for 'authnz' template.
message OutputMsg {
    
    // The authorization header
    string authorization = 1;
    
}

// Contains instance payload for 'authnz' template. This is passed to infrastructure backends during request-time
// through HandleAuthnZService.HandleAuthnZ.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // The request contains the core information about the request being made
    RequestMsg request = 1;
    
    // The target contains aggregated Kube information about the destination
    TargetMsg target = 2;
    
}

// A Target contains the Action destination.
message TargetMsg {
    
    // The namespace the target service is in
    string namespace = 1;
    
    // The service the action is being taken on.
    string service = 2;
    
    // The HTTP method of the request
    string method = 3;
    
    // The HTTP REST path within the service
    string path = 4;
    
    // Additional data about the target for use in policy.
    map<string, istio.policy.v1beta1.Value> properties = 5;
    
}

// The Headers models the core HTTP headers needed for the JWT/OIDC flows
message HeadersMsg {
    
    // The optional cookies are the HTTP request cookies sent by the browser. These
// contain the encrypted session toke
    string cookies = 1;
    
    // The optional authorization header contains credentials needed to verify
// access / authorization privileges.
    string authorization = 2;
    
    // Additional data about the headers for use in policy.
    map<string, istio.policy.v1beta1.Value> properties = 3;
    
}

// The QueryParams are the code HTTP request query parameters used in an OAuth 2.0 / OIDC flow
message QueryParamsMsg {
    
    // The error matches an OAuth 2.0 callback error response
    string error = 1;
    
    // The code matches an OAuth 2.0 callback authorization code grant
    string code = 2;
    
    // Additional data about the query parameters for use in policy.
    map<string, istio.policy.v1beta1.Value> properties = 3;
    
}

// The Request captures information about the incoming HTTP request
message RequestMsg {
    
    // The HTTP scheme
    string scheme = 1;
    
    // The HTTP host
    string host = 2;
    
    // The HTTP path
    string path = 3;
    
    // The HTTP headers on the request
    HeadersMsg headers = 4;
    
    // THE HTTP query params
    QueryParamsMsg params = 5;
    
    // Additional data about the Request for use in policy.
    map<string, istio.policy.v1beta1.Value> properties = 6;
    
}

// Contains inferred type information about specific instance of 'authnz' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
    // The request contains the core information about the request being made
    RequestType request = 1;
    
    // The target contains aggregated Kube information about the destination
    TargetType target = 2;
    
}

// A Target contains the Action destination.
message TargetType {
    
    // Additional data about the target for use in policy.
    map<string, istio.policy.v1beta1.ValueType> properties = 5;
    
}

// The Headers models the core HTTP headers needed for the JWT/OIDC flows
message HeadersType {
    
    // Additional data about the headers for use in policy.
    map<string, istio.policy.v1beta1.ValueType> properties = 3;
    
}

// The QueryParams are the code HTTP request query parameters used in an OAuth 2.0 / OIDC flow
message QueryParamsType {
    
    // Additional data about the query parameters for use in policy.
    map<string, istio.policy.v1beta1.ValueType> properties = 3;
    
}

// The Request captures information about the incoming HTTP request
message RequestType {
    
    // The HTTP headers on the request
    HeadersType headers = 4;
    
    // THE HTTP query params
    QueryParamsType params = 5;
    
    // Additional data about the Request for use in policy.
    map<string, istio.policy.v1beta1.ValueType> properties = 6;
    
}


// Represents instance configuration schema for 'authnz' template.
message InstanceParam {
    
    // The request contains the core information about the request being made
    RequestInstanceParam request = 1;
    
    // The target contains aggregated Kube information about the destination
    TargetInstanceParam target = 2;
    
}

// A Target contains the Action destination.
message TargetInstanceParam {
    
    // The namespace the target service is in
    string namespace = 1;
    
    // The service the action is being taken on.
    string service = 2;
    
    // The HTTP method of the request
    string method = 3;
    
    // The HTTP REST path within the service
    string path = 4;
    
    // Additional data about the target for use in policy.
    map<string, string> properties = 5;
    
}

// The Headers models the core HTTP headers needed for the JWT/OIDC flows
message HeadersInstanceParam {
    
    // The optional cookies are the HTTP request cookies sent by the browser. These
// contain the encrypted session toke
    string cookies = 1;
    
    // The optional authorization header contains credentials needed to verify
// access / authorization privileges.
    string authorization = 2;
    
    // Additional data about the headers for use in policy.
    map<string, string> properties = 3;
    
}

// The QueryParams are the code HTTP request query parameters used in an OAuth 2.0 / OIDC flow
message QueryParamsInstanceParam {
    
    // The error matches an OAuth 2.0 callback error response
    string error = 1;
    
    // The code matches an OAuth 2.0 callback authorization code grant
    string code = 2;
    
    // Additional data about the query parameters for use in policy.
    map<string, string> properties = 3;
    
}

// The Request captures information about the incoming HTTP request
message RequestInstanceParam {
    
    // The HTTP scheme
    string scheme = 1;
    
    // The HTTP host
    string host = 2;
    
    // The HTTP path
    string path = 3;
    
    // The HTTP headers on the request
    HeadersInstanceParam headers = 4;
    
    // THE HTTP query params
    QueryParamsInstanceParam params = 5;
    
    // Additional data about the Request for use in policy.
    map<string, string> properties = 6;
    
}

