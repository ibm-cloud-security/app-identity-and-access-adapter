// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// Template authnZ defines an authorization and authentication adapter template
//
// The `authorization` template defines parameters for performing policy
// enforcement within Istio. It is primarily concerned with enabling Mixer
// adapters to make decisions about who is allowed to do what.
// In this template, the "who" is defined in a Subject message. The "what" is
// defined in an Action message. During a Mixer Check call, these values
// will be populated based on configuration from request attributes and
// passed to individual authorization adapters to adjudicate.
package authnz;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/check.proto";
import "policy/v1beta1/value_type.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_CHECK_WITH_OUTPUT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "authnz";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandleAuthnZService is implemented by backends that wants to handle request-time 'authnz' instances.
service HandleAuthnZService {
    // HandleAuthnZ is called by Mixer at request-time to deliver 'authnz' instances to the backend.
    rpc HandleAuthnZ(HandleAuthnZRequest) returns (HandleAuthnZResponse);
    
}

// Request message for HandleAuthnZ method.
message HandleAuthnZRequest {

    // 'authnz' instance.
    InstanceMsg instance = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}

message HandleAuthnZResponse {
    istio.mixer.adapter.model.v1beta1.CheckResult result = 1;
    OutputMsg output = 2;
}

// Contains output payload for 'authnz' template.
message OutputMsg {
    
    // The access token cookie using in OAuth 2.0 flows
    string access_token_cookie = 1;
    
    // The ID token cookie using in OAuth 2.0 flows
    string id_token_cookie = 2;
    
    // The refresh token cookie using in OAuth 2.0 flows
    string refresh_token_cookie = 3;
    
}

// Contains instance payload for 'authnz' template. This is passed to infrastructure backends during request-time
// through HandleAuthnZService.HandleAuthnZ.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // A subject contains a list of attributes that identify
// the caller identity.
    SubjectMsg subject = 1;
    
    // An action defines "how a resource is accessed".
    ActionMsg action = 2;
    
}

// The optional credentials passed in the request
message CredentialsMsg {
    
    // Optionally contains the authn/z session cookies
    string cookies = 1;
    
    // Optionally contains the authorization header
    string authorization_header = 2;
    
}

// A subject contains a list of attributes that identify
// the caller identity.
message SubjectMsg {
    
    // The user name/ID that the subject represents.
    string user = 1;
    
    // Groups the subject belongs to depending on the authentication mechanism,
// "groups" are normally populated from JWT claim or client certificate.
// The operator can define how it is populated when creating an instance of
// the template.
    string groups = 2;
    
    // The optional credentials passed in the request
    CredentialsMsg credentials = 3;
    
    // Additional attributes about the subject.
    map<string, istio.policy.v1beta1.Value> properties = 4;
    
}

// An action defines "how a resource is accessed".
message ActionMsg {
    
    // Namespace the target action is taking place in.
    string namespace = 1;
    
    // The Service the action is being taken on.
    string service = 2;
    
    // What action is being taken.
    string method = 3;
    
    // HTTP REST path within the service
    string path = 4;
    
    // Additional data about the action for use in policy.
    map<string, istio.policy.v1beta1.Value> properties = 5;
    
}

// Contains inferred type information about specific instance of 'authnz' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
    // A subject contains a list of attributes that identify
// the caller identity.
    SubjectType subject = 1;
    
    // An action defines "how a resource is accessed".
    ActionType action = 2;
    
}

// The optional credentials passed in the request
message CredentialsType {
    
}

// A subject contains a list of attributes that identify
// the caller identity.
message SubjectType {
    
    // The optional credentials passed in the request
    CredentialsType credentials = 3;
    
    // Additional attributes about the subject.
    map<string, istio.policy.v1beta1.ValueType> properties = 4;
    
}

// An action defines "how a resource is accessed".
message ActionType {
    
    // Additional data about the action for use in policy.
    map<string, istio.policy.v1beta1.ValueType> properties = 5;
    
}


// Represents instance configuration schema for 'authnz' template.
message InstanceParam {
    
    // A subject contains a list of attributes that identify
// the caller identity.
    SubjectInstanceParam subject = 1;
    
    // An action defines "how a resource is accessed".
    ActionInstanceParam action = 2;
    
}

// The optional credentials passed in the request
message CredentialsInstanceParam {
    
    // Optionally contains the authn/z session cookies
    string cookies = 1;
    
    // Optionally contains the authorization header
    string authorization_header = 2;
    
}

// A subject contains a list of attributes that identify
// the caller identity.
message SubjectInstanceParam {
    
    // The user name/ID that the subject represents.
    string user = 1;
    
    // Groups the subject belongs to depending on the authentication mechanism,
// "groups" are normally populated from JWT claim or client certificate.
// The operator can define how it is populated when creating an instance of
// the template.
    string groups = 2;
    
    // The optional credentials passed in the request
    CredentialsInstanceParam credentials = 3;
    
    // Additional attributes about the subject.
    map<string, string> properties = 4;
    
}

// An action defines "how a resource is accessed".
message ActionInstanceParam {
    
    // Namespace the target action is taking place in.
    string namespace = 1;
    
    // The Service the action is being taken on.
    string service = 2;
    
    // What action is being taken.
    string method = 3;
    
    // HTTP REST path within the service
    string path = 4;
    
    // Additional data about the action for use in policy.
    map<string, string> properties = 5;
    
}

