/*
Copyright 2019 The Kubernetes Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ibm-cloud-security/policy-enforcer-mixer-adapter/adapter/pkg/apis/policies/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JwtConfigLister helps list JwtConfigs.
type JwtConfigLister interface {
	// List lists all JwtConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.JwtConfig, err error)
	// JwtConfigs returns an object that can list and get JwtConfigs.
	JwtConfigs(namespace string) JwtConfigNamespaceLister
	JwtConfigListerExpansion
}

// jwtConfigLister implements the JwtConfigLister interface.
type jwtConfigLister struct {
	indexer cache.Indexer
}

// NewJwtConfigLister returns a new JwtConfigLister.
func NewJwtConfigLister(indexer cache.Indexer) JwtConfigLister {
	return &jwtConfigLister{indexer: indexer}
}

// List lists all JwtConfigs in the indexer.
func (s *jwtConfigLister) List(selector labels.Selector) (ret []*v1.JwtConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.JwtConfig))
	})
	return ret, err
}

// JwtConfigs returns an object that can list and get JwtConfigs.
func (s *jwtConfigLister) JwtConfigs(namespace string) JwtConfigNamespaceLister {
	return jwtConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JwtConfigNamespaceLister helps list and get JwtConfigs.
type JwtConfigNamespaceLister interface {
	// List lists all JwtConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.JwtConfig, err error)
	// Get retrieves the JwtConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.JwtConfig, error)
	JwtConfigNamespaceListerExpansion
}

// jwtConfigNamespaceLister implements the JwtConfigNamespaceLister
// interface.
type jwtConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JwtConfigs in the indexer for a given namespace.
func (s jwtConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.JwtConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.JwtConfig))
	})
	return ret, err
}

// Get retrieves the JwtConfig from the indexer for a given namespace and name.
func (s jwtConfigNamespaceLister) Get(name string) (*v1.JwtConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("jwtconfig"), name)
	}
	return obj.(*v1.JwtConfig), nil
}
